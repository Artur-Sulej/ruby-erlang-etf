# encoding: utf-8

require 'test_helper'

class Erlang::ETF::LargeBigTest < Minitest::Test

  def test_erlang_load
    etf = Erlang::ETF::LargeBig.erlang_load(StringIO.new([0,0,0,0,0].pack('C*')))
    assert_equal Erlang.from(0), etf.term
    etf = Erlang::ETF::LargeBig.erlang_load(StringIO.new([0,0,0,1,1,1].pack('C*')))
    assert_equal Erlang.from(-1), etf.term
    etf = Erlang::ETF::LargeBig.erlang_load(StringIO.newpack('C*')))
    assert_equal Erlang.from((+1 << (256 * 8)) - 1), etf.term
  end

  def test_new
    etf = Erlang::ETF::LargeBig[(+1 << (256 * 8)) - 1]
    assert_equal Erlang.from((+1 << (256 * 8)) - 1), etf.term
    etf = Erlang::ETF::LargeBig[(-1 << (256 * 8)) + 1]
    assert_equal Erlang.from((-1 << (256 * 8)) + 1), etf.term
  end

  def test_erlang_dump
    binary = Erlang::ETF::LargeBig[(+1 << (256 * 8)) - 1].erlang_dump
    assert_equalpack('C*'), binary
    binary = Erlang::ETF::LargeBig[(-1 << (256 * 8)) + 1].erlang_dump
    assert_equalpack('C*'), binary
  end

  def test_erlang_external_type
    etf = Erlang::ETF::LargeBig[0]
    assert_equal :large_big, etf.erlang_external_type
  end

  def test_to_erlang
    etf = Erlang::ETF::LargeBig[(+1 << (256 * 8)) - 1]
    assert_equal Erlang.from((+1 << (256 * 8)) - 1), etf.to_erlang
    etf = Erlang::ETF::LargeBig[(-1 << (256 * 8)) + 1]
    assert_equal Erlang.from((-1 << (256 * 8)) + 1), etf.to_erlang
  end

  def test_property_of_inspect
    property_of {
      gen_large_big
    }.check { |etf|
      assert_equal etf, eval(etf.inspect)
    }
  end

  def test_property_of_etf
    property_of {
      gen_large_big
    }.check { |etf|
      term = Erlang.from(etf)
      binary = etf.erlang_dump
      assert_equal etf, Erlang::ETF::LargeBig.erlang_load(StringIO.new(binary[1..-1]))
      assert_equal term, Erlang.binary_to_term(Erlang.term_to_binary(etf))
    }
  end

end
